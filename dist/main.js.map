{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/js/moving_object.js","webpack:///./src/js/status_text.js","webpack:///./src/js/computer.js","webpack:///./src/js/player.js","webpack:///./src/js/health_bar.js","webpack:///./src/js/battle_options.js","webpack:///./src/js/game.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","MovingObject","attacker","target","dmg","this","height","width","img","Image","src","position","x","y","attackTop","attackBot","xVelocity","yVelocity","done","finalPos","health","handleAttack","dt","ctx","drawImage","StatusText","status","gameHeight","gameWidth","finalStatus","split","currentStatus","count","length","draw","update","rect","fillStyle","fill","lineWidth","strokeStyle","stroke","font","fillText","Computer","attackPower","fileName","join","currentHealth","maxHealth","attacking","inPosition","attackItems","statusText","attackText","velocity","initialPosition","attackAnimation","heal","attacked","forEach","item","idx","handleCollision","attackTimer","setInterval","clearInterval","opponent","totalDmg","Math","floor","random","counter","attack","push","endAttack","healing","move","setTimeout","Player","healText","HealthBar","player","fillRect","round","BattleOptions","game","selected","optionsText","options","quit","beginPath","moveTo","lineTo","closePath","drawLine","currentPlayer","console","log","Game","computer","gameState","activeAttack","start","playHealth","compHealth","battleOptions","changeTurn","document","addEventListener","getElementById","getContext","menu","window","menuListen","e","keyCode","clearRect","classList","add","removeEventListener","gameInput","gameLoop","gameOver","overListen","preventDefault","action","prevTime","timestamp","playTurn","winner","requestAnimationFrame","cancelAnimationFrame","remove"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","export default class MovingObject {\n  constructor(attacker, target, dmg) {\n    this.height = 50;\n    this.width = 50;\n    this.dmg = dmg;\n    this.name = attacker.name;\n    this.target = target;\n    this.img = new Image();\n    this.img.src = `./src/images/rock.png`\n    // may be helpful to have imgs per class with similar names so each will be unique\n    // maybe `./src/images/${this.name}item.png`\n    this.position = {\n      x: attacker.position.x + attacker.width / 2,\n      y: attacker.position.y + 50\n    }\n    this.attackTop = {\n      x: target.position.x - target.width / 5,\n      y: target.position.y + target.height / 2\n    }\n    this.attackBot = {\n      x: target.position.x + target.width - 20,\n      y: target.position.y\n    }\n    this.xVelocity = attacker.position.x > target.position.x ? -150 : 150; // if start is greater, vel will be neg\n    this.yVelocity = this.xVelocity === 150 ? -60 : 60; // Y vel is opp of x vel\n    this.done = false;\n    this.finalPos = this.xVelocity > 0 ? this.attackTop : this.attackBot;\n  }\n\n  handleCollision() {\n    this.target.health -= this.dmg;\n    this.target.handleAttack();\n    if (this.target.health <= 0) {\n      this.target.health = 0;\n    }\n  }\n\n  update(dt) {\n    if (this.xVelocity > 0) {\n      if (this.position.x <= this.finalPos.x || this.position.y >= this.finalPos.y) {\n        this.position.x += this.xVelocity / dt;\n        this.position.y += this.yVelocity / dt;\n      } else {\n        this.done = true;\n      }\n    } else {\n      if (this.position.x >= this.finalPos.x || this.position.y <= this.finalPos.y) {\n        this.position.x += this.xVelocity / dt;\n        this.position.y += this.yVelocity / dt;\n      } else {\n        this.done = true;\n      }\n    }\n  }\n\n  draw(ctx) {\n    if (this.done) return null;\n    ctx.drawImage(this.img, this.position.x, this.position.y, this.width, this.height);\n  }\n}","export default class StatusText {\n  constructor(status, gameHeight, gameWidth) {\n    this.gameHeight = gameHeight;\n    this.gameWidth = gameWidth;\n    this.finalStatus = status;\n    this.status = this.finalStatus.split(\"\");\n    this.currentStatus = \"\";\n    this.height = 125;\n    this.width = 400;\n    this.count = 0;\n    this.length = status.length;\n    this.position = {\n      x: this.gameWidth - this.width - 50,\n      y: this.gameHeight - this.height - 30\n    }\n    this.draw = this.draw.bind(this);\n    this.update = this.update.bind(this);\n  }\n// if lengths are not the same and status !== current, reset\n  draw(ctx) {\n    ctx.rect(this.position.x, this.position.y, this.width, this.height);\n    ctx.fillStyle = \"white\";\n    ctx.fill();\n    ctx.lineWidth = 5;\n    ctx.strokeStyle = \"black\";\n    ctx.stroke();\n    ctx.font = \"20px Arial\";\n    ctx.fillStyle = \"black\";\n    const width = this.position.x + 20;\n    ctx.fillText(this.currentStatus, width, this.position.y + this.height / 1.75);\n  }\n\n  update() {\n    if (this.count < this.length) {\n      this.currentStatus += this.status[this.count];\n      this.count++;\n    }\n  }\n}","import MovingObject from \"./moving_object\";\nimport StatusText from \"./status_text\";\n\nexport default class Computer {\n  constructor(health, attackPower, name, gameHeight, gameWidth) { // width only would be used for opponent position\n    // may be better to deconstruct obj to pass in traits from other browsers\n    // const { health, attackPower, name } = NAME OF OBJ PASSED IN \n\n    this.name = name; // only if browsers are ALL made by inputing data into this \n    this.fileName = this.name.split(\" \").join(\"\");\n    this.img = new Image();\n    this.img.src = `./src/images/${this.fileName}.png`;\n    this.height = 150;\n    this.width = 150;\n    this.gameWidth = gameWidth;\n    this.gameHeight = gameHeight;\n    this.health = health;\n    this.currentHealth = health;\n    this.maxHealth = health;\n    this.attacking = false;\n    this.inPosition = false;\n    this.attackItems = [];\n    this.inPosition = false;\n    this.statusText = null;\n    this.attackText = null;\n    this.attackPower = attackPower;\n    this.velocity = 55;\n    this.position = { // currently hidden off screen\n      y: 20,\n      x: this.gameWidth - this.width - 50\n    }\n    this.initialPosition = { // currently hidden off screen\n      x: this.gameWidth\n    }\n\n    this.attackAnimation = this.attackAnimation.bind(this);\n    this.heal = this.heal.bind(this);\n  }\n\n  // computer.js\n  draw(ctx, dt) { \n    // if being attacked, dont draw just return\n    if (!this.attacked) {\n      ctx.drawImage(this.img, this.initialPosition.x, this.position.y, this.height, this.width);\n    }\n    this.attackItems.forEach((item, idx) => {\n      if (item.done) {\n        item.handleCollision();\n        delete this.attackItems[idx];\n      }\n      // check for collision, if there is, reduce health\n      item.update(dt);\n      item.draw(ctx);\n    });\n  }\n\n  update(dt) {\n    if (!dt) return; // for initial dt being null\n    if (this.initialPosition.x > this.position.x) {\n      this.initialPosition.x -= this.velocity / dt;\n    }\n    if (this.initialPosition.x <= this.position.x) {\n      this.inPosition = true; // flags player as in position\n    }\n  }\n\n  handleAttack() {\n    this.attacked = true;\n    const attackTimer = setInterval(() => {\n      clearInterval(attackTimer);\n      this.attacked = false;\n    }, 20);\n  }\n\n  // attack(opponent) { // opponent should be instance of player class\n  //   this.attacking = true;\n  //   const dmg = Math.floor(Math.random() * this.attackPower);\n  //   opponent.health -= dmg;\n  //   if (opponent.health <= 0) {\n  //     opponent.health = 0;\n  //   }\n  //   this.attackAnimation(opponent);\n  //   console.log(`${this.name} attacked ${opponent.name} for ${dmg} damage!`);\n  // }\n\n  attackAnimation(opponent) {\n    const totalDmg = Math.floor(((Math.random() + .25) * this.attackPower));\n    this.statusText = new StatusText(`${this.name} attacked ${opponent.name} for ${totalDmg} damage!`, this.gameHeight, this.gameWidth);\n    this.attacking = true;\n    let counter = 0;\n    const dmg = totalDmg / 3;\n    const attack = setInterval(() => {\n      counter++;\n      this.attackItems.push(new MovingObject(this, opponent, dmg));\n      if (counter === 3) {\n        clearInterval(attack);\n      }\n    }, 250);\n    const endAttack = setInterval(() => {\n      clearInterval(endAttack);\n      this.attacking = false\n    }, 2500);\n    // console.log(`${this.name} attacked ${opponent.name} for ${totalDmg} damage!`);\n  }\n\n  heal() { // heal logic that will need to be reworked to consider players AP level\n    const healing = Math.floor(this.maxHealth * .10);\n    this.statusText = new StatusText(`${this.name} healed for ${healing}!`, this.gameHeight, this.gameWidth);\n    this.attacking = true;\n    this.health += healing;\n    if (this.health >= 100) {\n      this.health = 100;\n    }\n    const endAttack = setInterval(() => {\n      clearInterval(endAttack);\n      this.attacking = false;\n    }, 2500);\n    // console.log(`${this.name} healed for ${healing}!`);\n    // this.statusText = `${this.name} used ${this.healText} to heal for ${healing}!`;\n  }\n\n  playTurn(opponent) { // if health is low and opponent has more than low hp, heal\n    const move = (this.health < 20 && opponent.health > 20) ? () => this.heal() : (opponent) => this.attackAnimation(opponent);\n    // chooses to attack or curHealth based on health and Opp health\n    setTimeout(() => move(opponent), 1);\n  }\n\n}","import MovingObject from \"./moving_object\";\nimport StatusText from \"./status_text\";\n\nexport default class Player {\n  constructor(health, attackPower, name, gameHeight, gameWidth) { // width only would be used for opponent position\n    this.name = name; // only if browsers are ALL made by inputing data into this \n    this.fileName = this.name.split(\" \").join(\"\");\n    this.img = new Image();\n    this.img.src = `./src/images/${this.fileName}.png`;\n    this.height = 150;\n    this.width = 150;\n    this.health = health;\n    this.currentHealth = health;\n    this.gameHeight = gameHeight;\n    this.gameWidth = gameWidth;\n    this.maxHealth = health;\n    this.attacking = false;\n    this.attacked = false;\n    this.attackItems = [];\n    this.inPosition = false;\n    this.statusText = null;\n    this.attackText = null; // change later for more customized messages\n    this.healText = null; // change later for more customized messages\n    this.attackPower = attackPower;\n    this.velocity = 55;\n    this.position = { // default start pos\n      y: this.gameHeight - this.height - 50,\n      x: 40\n    }\n    this.initialPosition = { // currently hidden off screen\n      x: -this.width\n    }\n    this.attackAnimation = this.attackAnimation.bind(this);\n    this.draw = this.draw.bind(this);\n    // this.handleAttack = this.handleAttack.bind(this);\n  }\n\n  // player.js\n  draw(ctx, dt) {\n     // if being attacked, dont draw just return\n     if (!this.attacked) {\n      ctx.drawImage(this.img, this.initialPosition.x, this.position.y, this.height, this.width);\n    }\n    this.attackItems.forEach((item, idx) => {\n      if (item.done) {\n        item.handleCollision();\n        delete this.attackItems[idx];\n      }\n      // check for collision, if there is, reduce health\n      item.update(dt);\n      item.draw(ctx);\n    });\n  }\n\n  update(dt) {\n    if (!dt) return; // for initial dt being null\n    if (this.initialPosition.x < this.position.x) {\n      this.initialPosition.x += this.velocity / dt;\n    }\n    if (this.initialPosition.x >= this.position.x) {\n      this.inPosition = true; // flags player as in position\n    }\n    // if (/* attacking */true) {\n    //   // attack animation()\n    // } else if (/* initialPos !== to position */ true) {\n    //   // increment \n    // }\n  }\n\n  handleAttack() {\n    this.attacked = true;\n    const attackTimer = setInterval(() => {\n      clearInterval(attackTimer);\n      this.attacked = false;\n    }, 20);\n  }\n  // attack(opponent) { // opponent should be instance of opponent class\n    // const dmg = Math.floor(((Math.random() + .25) * this.attackPower) / 3); // add this to comp if it works\n    // opponent.health -= dmg;\n    // this.attackAnimation(opponent);\n    // if (opponent.health <= 0) {\n      //   opponent.health = 0;\n      // }\n      // this.statusText = `${this.name} used ${this.attackText} on ${opponent.name} for ${dmg} damage!`;\n      // console.log(`${this.name} attacked ${opponent.name} for ${dmg} damage!`);\n  // }\n    \n  attackAnimation(opponent) {\n    const totalDmg = Math.floor(((Math.random() + .25) * this.attackPower));\n    this.statusText = new StatusText(`${this.name} attacked ${opponent.name} for ${totalDmg} damage!`, this.gameHeight, this.gameWidth);\n    this.attacking = true;\n    let counter = 0;\n    const dmg = totalDmg / 3;\n    const attack = setInterval(() => {\n      counter++;\n      this.attackItems.push(new MovingObject(this, opponent, dmg));\n      if (counter === 3) {\n        clearInterval(attack);\n      }\n    }, 250);\n    const endAttack = setInterval(() => {\n      clearInterval(endAttack);\n      this.attacking = false;\n    }, 2500);\n    // console.log(`${this.name} attacked ${opponent.name} for ${totalDmg} damage!`);\n  }\n\n  heal() { // just adds health back to \n    // const healing = Math.floor(Math.random() * 10) + 6 - this.attackPower / 4;\n    debugger\n    const healing = Math.floor(this.maxHealth * .10);\n    this.statusText = new StatusText(`${this.name} healed for ${healing}!`, this.gameHeight, this.gameWidth);\n    this.attacking = true;\n    this.health += healing;\n    if (this.health >= 100) {\n      this.health = 100;\n    }\n    const endAttack = setInterval(() => {\n      clearInterval(endAttack);\n      this.attacking = false;\n    }, 2500);\n    // console.log(`${this.name} healed for ${healing}!`);\n    // this.statusText = `${this.name} used ${this.healText} to heal for ${healing}!`;\n  }\n\n  healAnimation() {\n    // maybe just make a bunch of gold stars that move up \n  }\n\n}","export default class HealthBar {\n  constructor(player) {\n    this.gameHeight = player.gameHeight;\n    this.gameWidth = player.gameWidth;\n    this.height = 25;\n    this.width = player.width * .75;\n    this.player = player;\n    this.draw = this.draw.bind(this);\n    this.position = {\n      x: player.position.x + player.width / 8,\n      y: player.position.y + player.height + 10\n    }\n  }\n\n  update(dt) {\n    // using dt made it a fraction / doesn't work well with static increments that are numbers\n    if (this.player.currentHealth === this.player.health) return;\n    if (this.player.currentHealth < this.player.health) {\n      this.player.currentHealth += 0.5;\n      // increments \n    }\n    if (this.player.currentHealth > this.player.health) {\n      this.player.currentHealth -= 0.5;\n    }\n  }\n\n  draw(ctx) {\n    // draw box with player health\n    if (!this.player.inPosition) return;\n    ctx.fillStyle = \"white\";\n    ctx.fillRect(\n      this.position.x, \n      this.position.y, \n      this.width, \n      this.height\n      );\n    ctx.fillStyle = \"red\";\n    ctx.fillRect(\n      this.position.x, \n      this.position.y, \n      this.width * (this.player.currentHealth / this.player.maxHealth), // calculates pixels based on current player health\n      this.height\n      );\n    ctx.font = \"16px Arial\";\n    ctx.fillStyle = \"black\";\n    // tried Math.round here to try to slow down increments a tad\n    ctx.fillText(Math.round(this.player.currentHealth), this.position.x + this.width / 2.5, this.position.y + this.height - 5);\n    // ctx.fillText(this.player.currentHealth, this.position.x + this.width / 2.5, this.position.y + this.height - 5);\n  }\n}","export default class BattleOptions {\n  constructor(gameHeight, gameWidth, game) {\n    this.gameHeight = gameHeight;\n    this.gameWidth = gameWidth;\n    this.game = game;\n    this.height = 125;\n    this.width = 400;\n    this.selected = 0;\n    this.optionsText = [\"Attack\", \"Heal\", \"Quit\"]\n    this.options = [this.attack, this.heal, this.quit];\n    this.position = {\n      x: this.gameWidth - this.width - 50,\n      y: this.gameHeight - this.height - 30\n    }\n  }\n\n  drawLine(ctx, width) {\n    if (this.selected === 0) {\n      ctx.beginPath();\n      ctx.moveTo(width, this.gameHeight - 75);\n      ctx.lineTo(width + 85, this.gameHeight - 75);\n      ctx.closePath();\n      ctx.stroke();\n    } else if (this.selected === 1){\n      ctx.beginPath();\n      ctx.moveTo(width + 115, this.gameHeight - 75);\n      ctx.lineTo(width + 180, this.gameHeight - 75);\n      ctx.closePath();\n      ctx.stroke();\n    } else if (this.selected === 2) {\n      ctx.beginPath();\n      ctx.moveTo(width + 210, this.gameHeight - 75);\n      ctx.lineTo(width + 270, this.gameHeight - 75);\n      ctx.closePath();\n      ctx.stroke();\n    }\n  }\n\n  draw(ctx){\n    ctx.rect(this.position.x, this.position.y, this.width, this.height);\n    ctx.fillStyle = \"white\";\n    ctx.fill();\n    ctx.lineWidth = 5;\n    ctx.strokeStyle = \"black\";\n    ctx.stroke();\n    const options = this.optionsText.join(\"    \");\n    ctx.font = \"30px Arial\";\n    ctx.fillStyle = \"black\";\n    const width = this.position.x + this.width / 6;\n    ctx.fillText(options, width, this.position.y + this.height / 1.75);\n    this.drawLine(ctx, width);\n  }\n\n  attack(currentPlayer, opponent) {\n    currentPlayer.attackAnimation(opponent); // will mainly just work for human player\n    // currentPlayer.attackAnimation();\n  }\n\n  heal(currentPlayer) {\n    currentPlayer.heal(); // will mainly just work for human player\n    // currentPlayer.healAnimation();\n  }\n\n  quit() {\n    console.log(\"Button not implemented yet!\");\n    // will quit the game\n    // renders html overlay with y and n listeners to confirm\n    // if n go away, if y call reset\n  }\n  \n}","import HealthBar from \"./health_bar\";\nimport BattleOptions from \"./battle_options\";\n\nexport default class Game {\n  constructor(player, computer) {\n    this.player = player;\n    this.computer = computer;\n    this.gameState = true; // starts true to prevent early attacks while players get positioned\n    this.activeAttack = false;\n    this.start = false;\n    this.playHealth = new HealthBar(this.player);\n    this.compHealth = new HealthBar(this.computer);\n    this.battleOptions = new BattleOptions(this.player.gameHeight, this.player.gameWidth, this);\n    this.currentPlayer = this.player;\n    this.status = null;\n    this.changeTurn = this.changeTurn.bind(this);\n  }\n\n  changeTurn() {\n    if (this.currentPlayer === this.player) {\n      this.currentPlayer = this.computer;\n      // this.attacking = false;\n    } else {\n      this.currentPlayer = this.player;\n      // this.attacking = false;\n    }\n  }\n\n  winner() {\n    if (this.player.health <= 0) {\n      console.log(`${this.computer.name} wins!`);\n      // this.reset();\n    }\n\n    if (this.computer.health <= 0) {\n      console.log(`${this.player.name} wins!`);\n      // this.reset();\n    }\n  }\n\n  gameOver() {\n    if (this.player.health <= 0 || this.computer.health <= 0) {\n      this.gameState = false;\n      return true;\n    }\n    return false;\n  }\n\n}\n\n// const canvas = document.getElementById(\"game-board\"); // changed to one after talking to oliver\n// const ctx = canvas.getContext(\"2d\");\n// const GAME_HEIGHT = 480;\n// const GAME_WIDTH = 840;","import \"./styles/index.css\";\nimport Computer from \"./js/computer\";\nimport Player from \"./js/player\";\nimport Game from \"./js/game\";\n\nconst players = [ // customize AP Health and texts later\n  {\n    health: 100,\n    attackPower: 20,\n    name: \"Chrome\",\n    attackText: \"Chrome used \",\n    healText: \" used consume RAM and healed for \"\n  },\n  {\n    health: 100,\n    attackPower: 20,\n    name: \"Firefox\",\n    attackText: \"\",\n    healText: \"\"\n  },\n  {\n    health: 100,\n    attackPower: 0,\n    name: \"Internet Explorer\",\n    attackText: \" used Obsolete, it's pretty useless and did \",\n    healText: \"\"\n  },\n  {\n    health: 100,\n    attackPower: 20,\n    name: \"Safari\",\n    attackText: \"\",\n    healText: \"\"\n  }\n]\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const GAME_HEIGHT = 480;\n  const GAME_WIDTH = 840;\n  const canvas = document.getElementById(\"game-board\"); \n  const ctx = canvas.getContext(\"2d\");\n  \n  let game;\n  let player;\n  let computer;\n  \n  const menu = document.getElementById(\"menu\");\n  const menuListen = e => {\n    if (e.keyCode === 32) {\n      ctx.clearRect(0, 0, 840, 480);\n      menu.classList.add(\"close-menu\");\n      window.removeEventListener(\"keypress\", menuListen)\n      window.addEventListener(\"keydown\", gameInput)\n      player = new Player(100, 20, \"Chrome\", GAME_HEIGHT, GAME_WIDTH); // temporary auto choice until the player decides their browser\n      computer = new Computer(100, 20, \"Firefox\", GAME_HEIGHT, GAME_WIDTH);\n      game = new Game(player, computer);\n      gameLoop();\n    }\n  };\n  window.addEventListener(\"keypress\", menuListen);\n  \n  const gameOver = document.getElementById(\"game-over\");\n  const overListen = e => {\n    if (e.keyCode === 32) { // will redirect to main menu after space bar\n      ctx.clearRect(0, 0, 840, 480);\n      // statusText.draw();\n      gameOver.classList.add(\"close-menu\");\n      window.removeEventListener(\"keypress\", overListen)\n      window.addEventListener(\"keydown\", gameInput)\n      player = new Player(100, 20, \"Chrome\", GAME_HEIGHT, GAME_WIDTH);\n      computer = new Computer(100, 20, \"Firefox\", GAME_HEIGHT, GAME_WIDTH);\n      game = new Game(player, computer);\n      gameLoop();\n    }\n  };\n\n  // const selectMenu = document.getElementById(\"select-menu\");\n  // const selectBrowser = e => {\n  //   if (e.keyCode === 32) {\n  //     ctx.clearRect(0, 0, 840, 480);\n  //     // statusText.draw();\n  //     selectMenu.classList.add(\"close-menu\");\n  //     window.removeEventListener(\"keypress\", selectBrowser)\n  //     window.addEventListener(\"keydown\", gameInput)\n  //     player = new Player(100, 20, \"Chrome\", GAME_HEIGHT, GAME_WIDTH);\n  //     computer = new Computer(100, 20, \"Firefox\", GAME_HEIGHT, GAME_WIDTH);\n  //     game = new Game(player, computer);\n  //     gameLoop();\n  //   }\n  // };\n  \n  const gameInput = (e) => {\n    if (game.player.inPosition && game.computer.inPosition) {\n      game.start = true;\n    }\n    if (game.currentPlayer === game.player && game.activeAttack === false && game.start === true) {\n      let selected = game.battleOptions.selected;\n      switch (e.keyCode) {\n        case 37: // 37 is left arrow key\n          e.preventDefault();\n          selected -= 1;\n          if (selected < 0) { // change selected to allow player to choose move with keys\n            selected = game.battleOptions.options.length - 1;\n          }\n          game.battleOptions.selected = selected;\n          break;\n        case 39: // 39 is right arrow key\n          e.preventDefault();\n          selected++;\n          if (selected > game.battleOptions.options.length - 1) {\n            selected = 0;\n          }\n          game.battleOptions.selected = selected;\n          break;\n        case 13: // 13 is enter key\n          e.preventDefault();\n          const action = game.battleOptions.options[selected];\n          if (selected === game.battleOptions.options.length - 1) {\n            action();\n            // do this below action and return when quiting so turn doesnt change and make computer go\n            return;\n          }\n          game.activeAttack = true;\n          // ^^ will only flag if its an attack and not quit\n          game.changeTurn();\n          action(game.player, game.computer);\n          // will either attack or heal based on player choice\n          break;\n      }\n    } else return;\n  };\n  \n  let prevTime = 0;\n  \n  function gameLoop(timestamp) {\n    let dt = timestamp - prevTime;\n    prevTime = timestamp;\n  \n    ctx.clearRect(0, 0, GAME_WIDTH, GAME_HEIGHT);\n    ctx.beginPath();\n\n    if (!game.computer.attacking && !game.player.attacking) game.activeAttack = false;\n    if (game.currentPlayer === game.computer && !game.activeAttack) {\n      game.activeAttack = true;\n      game.computer.playTurn(game.player);\n      game.currentPlayer = game.player;\n      // set timeout flag for player turns\n    }\n    if (game.currentPlayer === game.player && game.activeAttack) {\n      if (!game.computer.statusText) game.battleOptions.draw(ctx);\n      else { // due to change turn mechanics, correct status will not be on the current player\n        game.computer.statusText.update(ctx);\n        game.computer.statusText.draw(ctx);\n      }\n    } else if (game.currentPlayer === game.computer && game.activeAttack) {\n      if (!game.computer.statusText) game.battleOptions.draw(ctx);\n      else { // due to change turn mechanics, correct status will not be on the current player\n        game.player.statusText.update(ctx);\n        game.player.statusText.draw(ctx);\n      }\n    } else { // if there is no active attack, draw options for human player\n      game.battleOptions.draw(ctx);\n    }\n\n    game.player.update(dt);\n    game.player.draw(ctx, dt);\n\n    game.computer.update(dt);\n    game.computer.draw(ctx, dt);\n\n    game.playHealth.update(dt);\n    game.playHealth.draw(ctx);\n  \n    game.compHealth.update(dt);\n    game.compHealth.draw(ctx);\n  \n    // logic may need tweaking, due to initial null & timeouts\n  \n    if (game.gameOver() && !game.activeAttack) {\n      // game just abruptly ends, needs fixing\n      // maybe game over\n      setTimeout(() => game.winner(), 2000);\n    }\n\n    if (game.gameState) {\n      requestAnimationFrame(gameLoop);\n    } else {\n      cancelAnimationFrame(gameLoop);\n      window.removeEventListener(\"keydown\", gameInput);\n      gameOver.classList.remove(\"close-menu\");\n      window.addEventListener(\"keypress\", overListen);\n    }\n  }\n});"],"sourceRoot":""}