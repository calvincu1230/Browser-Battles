{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/js/moving_object.js","webpack:///./src/js/status_text.js","webpack:///./src/js/healing_object.js","webpack:///./src/js/computer.js","webpack:///./src/js/player.js","webpack:///./src/js/health_bar.js","webpack:///./src/js/battle_options.js","webpack:///./src/js/game.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","MovingObject","attacker","target","dmg","this","height","width","img","Image","src","position","x","y","attackTop","attackBot","xVelocity","yVelocity","done","finalPos","health","handleAttack","dt","ctx","drawImage","StatusText","status","gameHeight","gameWidth","finalStatus","currentStatus","count","length","draw","update","rect","fillStyle","fill","lineWidth","strokeStyle","stroke","font","fillText","includes","HealingObject","xPos","yPos","Computer","attackPower","fileName","split","join","currentHealth","maxHealth","attacking","inPosition","items","statusText","attackText","velocity","initialPosition","attackAnimation","heal","attacked","forEach","item","idx","handleCollision","attackTimer","setInterval","clearInterval","opponent","num","Math","random","totalDmg","floor","counter","attack","push","endAttack","healAnimation","healing","heals","move","setTimeout","Player","healText","HealthBar","player","fillRect","round","BattleOptions","game","selected","optionsText","options","quit","beginPath","moveTo","lineTo","closePath","drawLine","currentPlayer","console","log","Game","computer","gameState","activeAttack","start","playHealth","compHealth","battleOptions","winnerText","changeTurn","document","addEventListener","getElementById","getContext","menu","menuListen","e","keyCode","clearRect","classList","add","window","removeEventListener","gameInput","gameLoop","gameOver","overListen","youSure","youSureListen","remove","preventDefault","action","prevTime","timestamp","playTurn","winner","requestAnimationFrame","cancelAnimationFrame"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","export default class MovingObject {\n  constructor(attacker, target, dmg) {\n    this.height = 50;\n    this.width = 50;\n    this.dmg = dmg;\n    this.name = attacker.name;\n    this.target = target;\n    this.img = new Image();\n    this.img.src = `./src/images/rock.png`\n    // may be helpful to have imgs per class with similar names so each will be unique\n    // maybe `./src/images/${this.name}item.png`\n    this.position = {\n      x: attacker.position.x + attacker.width / 2,\n      y: attacker.position.y + 50\n    }\n    this.attackTop = {\n      x: target.position.x - target.width / 5,\n      y: target.position.y + target.height / 2\n    }\n    this.attackBot = {\n      x: target.position.x + target.width - 20,\n      y: target.position.y\n    }\n    this.xVelocity = attacker.position.x > target.position.x ? -150 : 150; // if start is greater, vel will be neg\n    this.yVelocity = this.xVelocity === 150 ? -60 : 60; // Y vel is opp of x vel\n    this.done = false;\n    this.finalPos = this.xVelocity > 0 ? this.attackTop : this.attackBot;\n  }\n\n  handleCollision() {\n    this.target.health -= this.dmg;\n    this.target.handleAttack();\n    if (this.target.health <= 0) {\n      this.target.health = 0;\n    }\n  }\n\n  update(dt) {\n    if (this.xVelocity > 0) {\n      if (this.position.x <= this.finalPos.x || this.position.y >= this.finalPos.y) {\n        this.position.x += this.xVelocity / dt;\n        this.position.y += this.yVelocity / dt;\n      } else {\n        this.done = true;\n      }\n    } else {\n      if (this.position.x >= this.finalPos.x || this.position.y <= this.finalPos.y) {\n        this.position.x += this.xVelocity / dt;\n        this.position.y += this.yVelocity / dt;\n      } else {\n        this.done = true;\n      }\n    }\n  }\n\n  draw(ctx) {\n    if (this.done) return null;\n    ctx.drawImage(this.img, this.position.x, this.position.y, this.width, this.height);\n  }\n}","export default class StatusText {\n  constructor(status, gameHeight, gameWidth) {\n    this.gameHeight = gameHeight;\n    this.gameWidth = gameWidth;\n    this.finalStatus = status;\n    this.currentStatus = \"\";\n    this.height = 125;\n    this.width = 400;\n    this.count = 0;\n    this.length = status.length;\n    this.position = {\n      x: this.gameWidth - this.width - 50,\n      y: this.gameHeight - this.height - 30\n    }\n    this.draw = this.draw.bind(this);\n    this.update = this.update.bind(this);\n  }\n// if lengths are not the same and status !== current, reset\n  draw(ctx) {\n    ctx.rect(this.position.x, this.position.y, this.width, this.height);\n    ctx.fillStyle = \"white\";\n    ctx.fill();\n    ctx.lineWidth = 5;\n    ctx.strokeStyle = \"black\";\n    ctx.stroke();\n    ctx.font = \"16px Press Start 2P\";\n    ctx.fillStyle = \"black\";\n    const width = this.position.x + 20;\n    ctx.fillText(this.currentStatus, width, this.position.y + this.height / 1.75);\n  }\n\n  update() {\n    if (this.finalStatus.includes('win')) {\n      this.currentStatus = this.finalStatus;\n      return;\n    }\n    if (this.count < this.length) {\n      this.currentStatus += this.finalStatus[this.count];\n      this.count++;\n    }\n  }\n}","export default class HealingObject {\n  constructor(xPos, yPos, height) {\n    this.height = 25;\n    this.width = 25;\n    this.img = new Image();\n    this.img.src = `./src/images/heal.png`\n    this.position = {\n      x: xPos,\n      y: yPos + height / 2\n    }\n    this.yVelocity = 60;\n    this.done = false;\n    this.finalPos = {\n      y: yPos - height / 2\n    };\n  }\n\n  handleCollision(){\n    return;\n  }\n\n  update(dt) {\n    if (this.position.y >= this.finalPos.y) {\n      this.position.y -= this.yVelocity / dt;\n    } else {\n      this.done = true;\n    }\n  }\n\n  draw(ctx) {\n    if (this.done) return null;\n    ctx.drawImage(this.img, this.position.x, this.position.y, this.width, this.height);\n  }\n}","import MovingObject from \"./moving_object\";\nimport StatusText from \"./status_text\";\nimport HealingObject from \"./healing_object\";\n\nexport default class Computer {\n  constructor(health, attackPower, name, gameHeight, gameWidth) { // width only would be used for opponent position\n    // may be better to deconstruct obj to pass in traits from other browsers\n    // const { health, attackPower, name } = NAME OF OBJ PASSED IN \n\n    this.name = name; // only if browsers are ALL made by inputing data into this \n    this.fileName = this.name.split(\" \").join(\"\");\n    this.img = new Image();\n    this.img.src = `./src/images/${this.fileName}.png`;\n    this.height = 150;\n    this.width = 150;\n    this.gameWidth = gameWidth;\n    this.gameHeight = gameHeight;\n    this.health = health;\n    this.currentHealth = health;\n    this.maxHealth = health;\n    this.attacking = false;\n    this.inPosition = false;\n    this.items = [];\n    this.inPosition = false;\n    this.statusText = null;\n    this.attackText = null;\n    this.attackPower = attackPower;\n    this.velocity = 55;\n    this.position = { // currently hidden off screen\n      y: 20,\n      x: this.gameWidth - this.width - 50\n    }\n    this.initialPosition = { // currently hidden off screen\n      x: this.gameWidth\n    }\n\n    this.attackAnimation = this.attackAnimation.bind(this);\n    this.heal = this.heal.bind(this);\n  }\n\n  // computer.js\n  draw(ctx, dt) { \n    // if being attacked, dont draw just return\n    if (!this.attacked) {\n      ctx.drawImage(this.img, this.initialPosition.x, this.position.y, this.height, this.width);\n    }\n    this.items.forEach((item, idx) => {\n      if (item.done) {\n        item.handleCollision();\n        delete this.items[idx];\n      }\n      // check for collision, if there is, reduce health\n      item.update(dt);\n      item.draw(ctx);\n    });\n  }\n\n  update(dt) {\n    if (!dt) return; // for initial dt being null\n    if (this.initialPosition.x > this.position.x) {\n      this.initialPosition.x -= this.velocity / dt;\n    }\n    if (this.initialPosition.x <= this.position.x) {\n      this.inPosition = true; // flags player as in position\n    }\n  }\n\n  handleAttack() {\n    this.attacked = true;\n    const attackTimer = setInterval(() => {\n      clearInterval(attackTimer);\n      this.attacked = false;\n    }, 20);\n  }\n\n  // attack(opponent) { // opponent should be instance of player class\n  //   this.attacking = true;\n  //   const dmg = Math.floor(Math.random() * this.attackPower);\n  //   opponent.health -= dmg;\n  //   if (opponent.health <= 0) {\n  //     opponent.health = 0;\n  //   }\n  //   this.attackAnimation(opponent);\n  //   console.log(`${this.name} attacked ${opponent.name} for ${dmg} damage!`);\n  // }\n\n  attackAnimation(opponent) {\n    const num = Math.random();\n    const totalDmg = Math.floor(((num < 0.1 ? .1 : num) * this.attackPower) + 5);\n    this.statusText = new StatusText(`${this.name} attacked ${opponent.name} for ${totalDmg} damage!`, this.gameHeight, this.gameWidth);\n    this.attacking = true;\n    let counter = 0;\n    const dmg = totalDmg / 3;\n    const attack = setInterval(() => {\n      counter++;\n      this.items.push(new MovingObject(this, opponent, dmg));\n      if (counter === 3) {\n        clearInterval(attack);\n      }\n    }, 250);\n    const endAttack = setInterval(() => {\n      clearInterval(endAttack);\n      this.attacking = false\n    }, 2500);\n    // console.log(`${this.name} attacked ${opponent.name} for ${totalDmg} damage!`);\n  }\n\n  heal() { // just adds health back to \n    // const healing = Math.floor(Math.random() * 10) + 6 - this.attackPower / 4;\n    this.healAnimation();\n    const healing = Math.floor(this.maxHealth * .10);\n    this.statusText = new StatusText(`${this.name} healed for ${healing}!`, this.gameHeight, this.gameWidth);\n    this.attacking = true;\n    this.health += healing;\n    if (this.health >= 100) {\n      this.health = 100;\n    }\n    const endAttack = setInterval(() => {\n      clearInterval(endAttack);\n      this.attacking = false;\n    }, 2500);\n    // console.log(`${this.name} healed for ${healing}!`);\n    // this.statusText = `${this.name} used ${this.healText} to heal for ${healing}!`;\n  }\n\n  healAnimation() {\n    let counter = 0;\n    let width = this.width / 4;\n    const xPos = this.position.x - this.width / 2;\n    const heals = setInterval(() => {\n      counter++;\n      if (counter === 10) {\n        clearInterval(heals);\n      }\n      if (counter === 6) {\n        width = this.width / 3;\n      }\n      width += this.width / 5;\n      this.items.push(new HealingObject((xPos + width), this.position.y + this.height / 2, this.height))\n    }, 100); \n  }\n\n  playTurn(opponent) { // if health is low and opponent has more than low hp, heal\n    const move = (this.health < 20 && opponent.health > 20) ? () => this.heal() : (opponent) => this.attackAnimation(opponent);\n    // chooses to attack or curHealth based on health and Opp health\n    setTimeout(() => move(opponent), 1);\n  }\n\n}","import MovingObject from \"./moving_object\";\nimport StatusText from \"./status_text\";\nimport HealingObject from \"./healing_object\";\n\nexport default class Player {\n  constructor(health, attackPower, name, gameHeight, gameWidth) { // width only would be used for opponent position\n    this.name = name; // only if browsers are ALL made by inputing data into this \n    this.fileName = this.name.split(\" \").join(\"\");\n    this.img = new Image();\n    this.img.src = `./src/images/${this.fileName}.png`;\n    this.height = 150;\n    this.width = 150;\n    this.health = health;\n    this.currentHealth = health;\n    this.gameHeight = gameHeight;\n    this.gameWidth = gameWidth;\n    this.maxHealth = health;\n    this.attacking = false;\n    this.attacked = false;\n    this.items = [];\n    this.inPosition = false;\n    this.statusText = null;\n    this.attackText = null; // change later for more customized messages\n    this.healText = null; // change later for more customized messages\n    this.attackPower = attackPower;\n    this.velocity = 55;\n    this.position = { // default start pos\n      y: this.gameHeight - this.height - 50,\n      x: 40\n    }\n    this.initialPosition = { // currently hidden off screen\n      x: -this.width\n    }\n    this.attackAnimation = this.attackAnimation.bind(this);\n    this.draw = this.draw.bind(this);\n    // this.handleAttack = this.handleAttack.bind(this);\n  }\n\n  // player.js\n  draw(ctx, dt) {\n     // if being attacked, dont draw just return\n     if (!this.attacked) {\n      ctx.drawImage(this.img, this.initialPosition.x, this.position.y, this.height, this.width);\n    }\n    this.items.forEach((item, idx) => {\n      if (item.done) {\n        item.handleCollision();\n        delete this.items[idx];\n      }\n      // check for collision, if there is, reduce health\n      item.update(dt);\n      item.draw(ctx);\n    });\n  }\n\n  update(dt) {\n    if (!dt) return; // for initial dt being null\n    if (this.initialPosition.x < this.position.x) {\n      this.initialPosition.x += this.velocity / dt;\n    }\n    if (this.initialPosition.x >= this.position.x) {\n      this.inPosition = true; // flags player as in position\n    }\n  }\n\n  handleAttack() {\n    this.attacked = true;\n    const attackTimer = setInterval(() => {\n      clearInterval(attackTimer);\n      this.attacked = false;\n    }, 20);\n  }\n  // attack(opponent) { // opponent should be instance of opponent class\n    // const dmg = Math.floor(((Math.random() + .25) * this.attackPower) / 3); // add this to comp if it works\n    // opponent.health -= dmg;\n    // this.attackAnimation(opponent);\n    // if (opponent.health <= 0) {\n      //   opponent.health = 0;\n      // }\n      // this.statusText = `${this.name} used ${this.attackText} on ${opponent.name} for ${dmg} damage!`;\n      // console.log(`${this.name} attacked ${opponent.name} for ${dmg} damage!`);\n  // }\n    \n  attackAnimation(opponent) {\n    const num = Math.random();\n    const totalDmg = Math.floor(((num < 0.1 ? .10 : num) * this.attackPower) + 5);\n    this.statusText = new StatusText(`${this.name} attacked ${opponent.name} for ${totalDmg} damage!`, this.gameHeight, this.gameWidth);\n    this.attacking = true;\n    let counter = 0;\n    const dmg = totalDmg / 3;\n    const attack = setInterval(() => {\n      counter++;\n      this.items.push(new MovingObject(this, opponent, dmg));\n      if (counter === 3) {\n        clearInterval(attack);\n      }\n    }, 250);\n    const endAttack = setInterval(() => {\n      clearInterval(endAttack);\n      this.attacking = false;\n    }, 2500);\n    // console.log(`${this.name} attacked ${opponent.name} for ${totalDmg} damage!`);\n  }\n\n  heal() { // just adds health back to \n    // const healing = Math.floor(Math.random() * 10) + 6 - this.attackPower / 4;\n    this.healAnimation();\n    const healing = Math.floor(this.maxHealth * .10);\n    this.statusText = new StatusText(`${this.name} healed for ${healing}!`, this.gameHeight, this.gameWidth);\n    this.attacking = true;\n    this.health += healing;\n    if (this.health >= 100) {\n      this.health = 100;\n    }\n    const endAttack = setInterval(() => {\n      clearInterval(endAttack);\n      this.attacking = false;\n    }, 2500);\n    // console.log(`${this.name} healed for ${healing}!`);\n    // this.statusText = `${this.name} used ${this.healText} to heal for ${healing}!`;\n  }\n\n  healAnimation() {\n    let counter = 0;\n    let width = this.width / 4;\n    const xPos = this.position.x - this.width / 2;\n    const heals = setInterval(() => {\n      counter++;\n      if (counter === 10) {\n        clearInterval(heals);\n      }\n      if (counter === 6) {\n        width = this.width / 3;\n      }\n      width += this.width / 5;\n      this.items.push(new HealingObject((xPos + width), this.position.y + this.height / 2, this.height))\n    }, 100); \n  }\n\n}","export default class HealthBar {\n  constructor(player) {\n    this.gameHeight = player.gameHeight;\n    this.gameWidth = player.gameWidth;\n    this.height = 25;\n    this.width = player.width * .75;\n    this.player = player;\n    this.draw = this.draw.bind(this);\n    this.position = {\n      x: player.position.x + player.width / 8,\n      y: player.position.y + player.height + 10\n    }\n  }\n\n  update(dt) {\n    // using dt made it a fraction / doesn't work well with static increments that are numbers\n    if (this.player.currentHealth === this.player.health) return;\n    if (this.player.currentHealth < this.player.health) {\n      this.player.currentHealth += 0.5;\n      // increments \n    }\n    if (this.player.currentHealth > this.player.health) {\n      this.player.currentHealth -= 0.5;\n    }\n  }\n\n  draw(ctx) {\n    // draw box with player health\n    if (!this.player.inPosition) return;\n    ctx.fillStyle = \"white\";\n    ctx.fillRect(\n      this.position.x, \n      this.position.y, \n      this.width, \n      this.height\n      );\n    ctx.fillStyle = \"red\";\n    ctx.fillRect(\n      this.position.x, \n      this.position.y, \n      this.width * (this.player.currentHealth / this.player.maxHealth), // calculates pixels based on current player health\n      this.height\n      );\n    ctx.font = \"16px Arial\";\n    ctx.fillStyle = \"black\";\n    // tried Math.round here to try to slow down increments a tad\n    ctx.fillText(Math.round(this.player.currentHealth), this.position.x + this.width / 2.5, this.position.y + this.height - 5);\n    // ctx.fillText(this.player.currentHealth, this.position.x + this.width / 2.5, this.position.y + this.height - 5);\n  }\n}","export default class BattleOptions {\n  constructor(gameHeight, gameWidth, game) {\n    this.gameHeight = gameHeight;\n    this.gameWidth = gameWidth;\n    this.game = game;\n    this.height = 125;\n    this.width = 400;\n    this.selected = 0;\n    this.optionsText = [\"Attack\", \"Heal\", \"Quit\"]\n    this.options = [this.attack, this.heal, this.quit];\n    this.position = {\n      x: this.gameWidth - this.width - 50,\n      y: this.gameHeight - this.height - 30\n    }\n  }\n\n  drawLine(ctx, width) {\n    if (this.selected === 0) {\n      ctx.beginPath();\n      ctx.moveTo(width, this.gameHeight - 75);\n      ctx.lineTo(width + 85, this.gameHeight - 75);\n      ctx.closePath();\n      ctx.stroke();\n    } else if (this.selected === 1){\n      ctx.beginPath();\n      ctx.moveTo(width + 115, this.gameHeight - 75);\n      ctx.lineTo(width + 180, this.gameHeight - 75);\n      ctx.closePath();\n      ctx.stroke();\n    } else if (this.selected === 2) {\n      ctx.beginPath();\n      ctx.moveTo(width + 210, this.gameHeight - 75);\n      ctx.lineTo(width + 270, this.gameHeight - 75);\n      ctx.closePath();\n      ctx.stroke();\n    }\n  }\n\n  draw(ctx){\n    ctx.rect(this.position.x, this.position.y, this.width, this.height);\n    ctx.fillStyle = \"white\";\n    ctx.fill();\n    ctx.lineWidth = 5;\n    ctx.strokeStyle = \"black\";\n    ctx.stroke();\n    const options = this.optionsText.join(\"    \");\n    ctx.font = \"30px Arial\";\n    ctx.fillStyle = \"black\";\n    const width = this.position.x + this.width / 6;\n    ctx.fillText(options, width, this.position.y + this.height / 1.75);\n    this.drawLine(ctx, width);\n  }\n\n  attack(currentPlayer, opponent) {\n    currentPlayer.attackAnimation(opponent); // will mainly just work for human player\n    // currentPlayer.attackAnimation();\n  }\n\n  heal(currentPlayer) {\n    currentPlayer.heal(); // will mainly just work for human player\n    // currentPlayer.healAnimation();\n  }\n\n  quit() {\n    console.log(\"Button not implemented yet!\");\n    // will quit the game\n    // renders html overlay with y and n listeners to confirm\n    // if n go away, if y call reset\n  }\n  \n}","import HealthBar from \"./health_bar\";\nimport BattleOptions from \"./battle_options\";\nimport StatusText from \"./status_text\";\n\nexport default class Game {\n  constructor(player, computer) {\n    this.player = player;\n    this.computer = computer;\n    this.gameState = true; // starts true to prevent early attacks while players get positioned\n    this.activeAttack = false;\n    this.start = false;\n    this.playHealth = new HealthBar(this.player);\n    this.compHealth = new HealthBar(this.computer);\n    this.battleOptions = new BattleOptions(this.player.gameHeight, this.player.gameWidth, this);\n    this.winnerText = null;\n    this.currentPlayer = this.player;\n    this.status = null;\n    this.changeTurn = this.changeTurn.bind(this);\n  }\n\n  changeTurn() {\n    if (this.currentPlayer === this.player) {\n      this.currentPlayer = this.computer;\n      // this.attacking = false;\n    } else {\n      this.currentPlayer = this.player;\n      // this.attacking = false;\n    }\n  }\n\n  winner() {\n    let winnerText = \"\";\n    if (this.player.health <= 0) {\n      winnerText = `${this.computer.name} wins!`;\n    }\n\n    if (this.computer.health <= 0) {\n      winnerText = `${this.player.name} wins!`;\n    }\n    if (!winnerText) return false;\n    this.winnerText = new StatusText(winnerText, this.player.gameHeight, this.player.gameWidth);\n    return true;\n  }\n\n  gameOver() {\n    if (this.player.currentHealth <= 0 || this.computer.currentHealth <= 0) {\n      this.gameState = false;\n      return true;\n    }\n    return false;\n  }\n\n}\n\n// const canvas = document.getElementById(\"game-board\"); // changed to one after talking to oliver\n// const ctx = canvas.getContext(\"2d\");\n// const GAME_HEIGHT = 480;\n// const GAME_WIDTH = 840;","import \"./styles/index.css\";\nimport Computer from \"./js/computer\";\nimport Player from \"./js/player\";\nimport Game from \"./js/game\";\n\nconst players = [ // customize AP Health and texts later\n  {\n    health: 100,\n    attackPower: 20,\n    name: \"Chrome\",\n    attackText: \"Chrome used \",\n    healText: \" used consume RAM and healed for \"\n  },\n  {\n    health: 100,\n    attackPower: 20,\n    name: \"Firefox\",\n    attackText: \"\",\n    healText: \"\"\n  },\n  {\n    health: 100,\n    attackPower: 0,\n    name: \"Internet Explorer\",\n    attackText: \" used Obsolete, it's pretty useless and did \",\n    healText: \"\"\n  },\n  {\n    health: 100,\n    attackPower: 20,\n    name: \"Safari\",\n    attackText: \"\",\n    healText: \"\"\n  }\n]\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const GAME_HEIGHT = 480;\n  const GAME_WIDTH = 840;\n  const canvas = document.getElementById(\"game-board\"); \n  const ctx = canvas.getContext(\"2d\");\n  \n  let game;\n  let player;\n  let computer;\n  \n  const menu = document.getElementById(\"menu\");\n  const menuListen = e => {\n    if (e.keyCode === 32) {\n      ctx.clearRect(0, 0, 840, 480);\n      menu.classList.add(\"close-menu\");\n      window.removeEventListener(\"keydown\", menuListen);\n      window.addEventListener(\"keydown\", gameInput);\n      player = new Player(100, 20, \"Chrome\", GAME_HEIGHT, GAME_WIDTH); // temporary auto choice until the player decides their browser\n      computer = new Computer(100, 20, \"Firefox\", GAME_HEIGHT, GAME_WIDTH);\n      game = new Game(player, computer);\n      gameLoop();\n    }\n  };\n  window.addEventListener(\"keydown\", menuListen);\n  \n  const gameOver = document.getElementById(\"game-over\");\n  const overListen = e => {\n    if (e.keyCode === 32) { // will redirect to main menu after space bar\n      // ctx.clearRect(0, 0, 840, 480);\n      // statusText.draw();\n      gameOver.classList.add(\"close-menu\");\n      window.removeEventListener(\"keydown\", overListen);\n      window.addEventListener(\"keydown\", gameInput);\n      player = new Player(100, 20, \"Chrome\", GAME_HEIGHT, GAME_WIDTH);\n      computer = new Computer(100, 20, \"Firefox\", GAME_HEIGHT, GAME_WIDTH);\n      game = new Game(player, computer);\n      gameLoop();\n    }\n  };\n\n  const youSure = document.getElementById(\"you-sure\");\n  const youSureListen = e => {\n    // debugger\n    if (e.keyCode === 121 || e.keyCode === 89) { // if they press y or Y\n      // end the game\n      youSure.classList.add(\"close-menu\");\n      menu.classList.remove(\"close-menu\");\n      window.removeEventListener(\"keydown\", youSureListen);\n      window.addEventListener(\"keydown\", menuListen);\n      game = null;\n    }\n    if (e.keyCode === 110 || e.keyCode === 78) { // if they press n or N\n      // remove event listener and turn game listener back on\n      youSure.classList.add(\"close-menu\");\n      window.removeEventListener(\"keydown\", youSureListen);\n      window.addEventListener(\"keydown\", gameInput);\n    }\n  }\n  \n  const gameInput = (e) => {\n    if (game.player.inPosition && game.computer.inPosition) {\n      game.start = true;\n    }\n    if (game.currentPlayer === game.player && game.activeAttack === false && game.start === true) {\n      let selected = game.battleOptions.selected;\n      switch (e.keyCode) {\n        case 37: // 37 is left arrow key\n        e.preventDefault();\n        selected -= 1;\n        if (selected < 0) { // change selected to allow player to choose move with keys\n          selected = game.battleOptions.options.length - 1;\n        }\n        game.battleOptions.selected = selected;\n        break;\n        case 39: // 39 is right arrow key\n        e.preventDefault();\n        selected++;\n        if (selected > game.battleOptions.options.length - 1) {\n          selected = 0;\n        }\n        game.battleOptions.selected = selected;\n        break;\n        case 13: // 13 is enter key\n          e.preventDefault();\n          const action = game.battleOptions.options[selected];\n          if (selected === game.battleOptions.options.length - 1) {\n\n            // temporary, will add a confirm (y/n) overlay in case of accidental click\n            youSure.classList.remove(\"close-menu\");\n            window.removeEventListener(\"keydown\", gameInput);\n            window.addEventListener(\"keydown\", youSureListen);\n              \n            // do this below action and return when quiting so turn doesnt change and make computer go\n            return;\n          }\n          game.activeAttack = true;\n          // ^^ will only flag if its an attack and not quit\n          game.changeTurn();\n          action(game.player, game.computer);\n          // will either attack or heal based on player choice\n          break;\n      }\n    } else return;\n  };\n  \n  let prevTime = 0;\n  \n  function gameLoop(timestamp) {\n    let dt = timestamp - prevTime;\n    prevTime = timestamp;\n  \n    ctx.clearRect(0, 0, GAME_WIDTH, GAME_HEIGHT);\n    ctx.beginPath();\n\n    if (!game.computer.attacking && !game.player.attacking && game.gameState) game.activeAttack = false;\n    if (game.currentPlayer === game.computer && !game.activeAttack) {\n      game.activeAttack = true;\n      game.computer.playTurn(game.player);\n      game.currentPlayer = game.player;\n      // set timeout flag for player turns\n    }\n    if (game.winner()) {\n      game.winnerText.update();\n      game.winnerText.draw(ctx);\n    } else {\n      if (game.currentPlayer === game.player && game.activeAttack) {\n        if (!game.computer.statusText) game.battleOptions.draw(ctx);\n        else { // due to change turn mechanics, correct status will not be on the current player\n          game.computer.statusText.update();\n          game.computer.statusText.draw(ctx);\n        }\n      } else if (game.currentPlayer === game.computer && game.activeAttack) {\n        // if (!game.computer.statusText) game.battleOptions.draw(ctx);\n        // else { // due to change turn mechanics, correct status will not be on the current player\n          game.player.statusText.update();\n          game.player.statusText.draw(ctx);\n        // }\n      } else { // if there is no active attack, draw options for human player\n        game.battleOptions.draw(ctx);\n      }\n    }\n\n    game.player.update(dt);\n    game.player.draw(ctx, dt);\n\n    game.computer.update(dt);\n    game.computer.draw(ctx, dt);\n\n    game.playHealth.update(dt);\n    game.playHealth.draw(ctx);\n  \n    game.compHealth.update(dt);\n    game.compHealth.draw(ctx);\n  \n    // logic may need tweaking, due to initial null & timeouts\n  \n    if (game.gameOver() && !game.activeAttack) {\n      game.activeAttack = true;\n    }\n\n    if (game.gameState) {\n      requestAnimationFrame(gameLoop);\n    } else {\n      cancelAnimationFrame(gameLoop);\n      setTimeout(() => {\n        // puts new overlay on the game if over to prompt play again\n        window.removeEventListener(\"keydown\", gameInput); // removes gameplay listeners\n        gameOver.classList.remove(\"close-menu\"); // displays overlay\n        window.addEventListener(\"keydown\", overListen); // adds restart game listener\n      }, 1750);\n    }\n  }\n});"],"sourceRoot":""}