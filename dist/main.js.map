{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/js/moving_object.js","webpack:///./src/js/status_text.js","webpack:///./src/js/healing_object.js","webpack:///./src/js/computer.js","webpack:///./src/js/player.js","webpack:///./src/js/health_bar.js","webpack:///./src/js/battle_options.js","webpack:///./src/js/game.js","webpack:///./src/js/game_options.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","MovingObject","attacker","target","dmg","this","height","width","img","Image","src","position","x","y","attackTop","attackBot","xVelocity","yVelocity","finalPos","done","health","handleAttack","dt","ctx","drawImage","StatusText","status","gameHeight","gameWidth","finalStatus","currentStatus1","currentStatus2","statusLine1","statusLine2","count","length","draw","update","checkLineLength","statusArr","split","slice","join","font","fillStyle","fillText","drawSingleLine","undefined","rect","fill","lineWidth","strokeStyle","stroke","includes","drawWinnerText","drawMultiLineStatus","HealingObject","xPos","yPos","Computer","player","fileName","currentHealth","maxHealth","attacking","attacked","inPosition","items","statusText","attackText","healText","attackPower","velocity","initialPosition","checkName","forEach","item","idx","handleCollision","attackTimer","setInterval","clearInterval","opponent","num","Math","random","totalDmg","round","counter","attack","push","endAttack","healAnimation","healing","heals","move","heal","attackAnimation","setTimeout","Player","filter","HealthBar","fillRect","BattleOptions","game","selected","optionsText","options","beginPath","moveTo","lineTo","closePath","drawLine","currentPlayer","Game","computer","gameState","activeAttack","start","playHealth","compHealth","battleOptions","winnerText","changeTurn","checkNames","GameOptions","optionsArr","images","loadImages","option","startX","startY","drawBox","players","document","addEventListener","selectedPlayer","selectedComputer","getElementById","getContext","gameStartOptions","menu","menuListen","e","keyCode","preventDefault","clearRect","classList","add","window","removeEventListener","choosePlayer","gameLoop","requestId","gameOver","overListen","remove","youSure","youSureListen","gameInput","requestAnimationFrame","action","cancelAnimationFrame","choice","randComp","prevTime","timestamp","playTurn","winner"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","export default class MovingObject {\n  constructor(attacker, target, dmg) {\n    this.height = 50;\n    this.width = 50;\n    this.dmg = dmg;\n    this.name = attacker.name;\n    this.target = target;\n    this.img = new Image();\n    this.img.src = `./src/images/rock.png`\n    // may be helpful to have imgs per class with similar names so each will be unique\n    // maybe `./src/images/${this.name}item.png`\n    this.position = {\n      x: attacker.position.x + attacker.width / 2,\n      y: attacker.position.y + 50\n    }\n    this.attackTop = {\n      x: target.position.x - target.width / 5,\n      y: target.position.y + target.height / 2\n    }\n    this.attackBot = {\n      x: target.position.x + target.width - 20,\n      y: target.position.y\n    }\n    this.xVelocity = attacker.position.x > target.position.x ? -150 : 150; // if start is greater, vel will be neg\n    this.yVelocity = this.xVelocity === 150 ? -60 : 60; // Y vel is opp of x vel\n    // this.rotation = 0;\n    this.finalPos = this.xVelocity > 0 ? this.attackTop : this.attackBot;\n    this.done = false;\n  }\n\n  handleCollision() {\n    this.target.health -= this.dmg;\n    this.target.handleAttack();\n    if (this.target.health <= 0) {\n      this.target.health = 0;\n    }\n  }\n\n  update(dt) {\n    if (this.xVelocity > 0) {\n      if (this.position.x <= this.finalPos.x || this.position.y >= this.finalPos.y) {\n        this.position.x += this.xVelocity / dt;\n        this.position.y += this.yVelocity / dt;\n      } else {\n        this.done = true;\n      }\n      // this.rotation += 1;\n    } else {\n      if (this.position.x >= this.finalPos.x || this.position.y <= this.finalPos.y) {\n        this.position.x += this.xVelocity / dt;\n        this.position.y += this.yVelocity / dt;\n      } else {\n        this.done = true;\n      }\n      // this.rotation -= 1;\n    }\n  }\n\n  draw(ctx) {\n    if (this.done) return null;\n    // ctx.save();\n    // ctx.translate(this.position.x, this.position.y); \n    // ctx.rotate(this.rotation * (Math.PI / 180));\n    // ctx.translate(-this.position.x, -this.position.y);\n    ctx.drawImage(this.img, this.position.x, this.position.y, this.width, this.height);\n    // ctx.restore();\n  }\n}","export default class StatusText {\n  constructor(status, gameHeight, gameWidth) {\n    this.gameHeight = gameHeight;\n    this.gameWidth = gameWidth;\n    this.finalStatus = status;\n    this.currentStatus1 = \"\";\n    this.currentStatus2 = \"\";\n    this.statusLine1 = \"\";\n    this.statusLine2 = \"\";\n    this.height = 125;\n    this.width = 500;\n    this.count = 0;\n    this.length = status.length;\n    this.position = {\n      x: this.gameWidth - this.width - 50,\n      y: this.gameHeight - this.height - 30\n    }\n    this.draw = this.draw.bind(this);\n    this.update = this.update.bind(this);\n    this.checkLineLength(status);\n  } \n  // add a method that will split text to two lines if over \n  checkLineLength(status) {\n    const statusArr = status.split(\" \");\n    if (statusArr.length > 6) {\n      this.statusLine1 = statusArr.slice(0, 6).join(\" \");\n      this.statusLine2 = statusArr.slice(6).join(\" \");\n    } else {\n      this.statusLine1 = status;\n    }\n  }\n\n  drawWinnerText(ctx) {\n    ctx.font = '20px \"Press Start 2P\"';\n    ctx.fillStyle = \"black\";\n    const width = this.position.x + 15;\n    ctx.fillText(this.currentStatus1, width + 50, this.position.y + this.height / 1.75);\n  }\n\n  drawMultiLineStatus(ctx) {\n    const height = this.position.y + this.height / 3 + 15; // current line height\n    // if (this.count.length < this.finalStatus.length) {\n    this.drawSingleLine(ctx, height);\n\n    if (this.count >= this.statusLine1.length) {\n      this.drawSingleLine(ctx, height + 25, this.currentStatus2); // changes line height \n    }\n  }\n\n  drawSingleLine(ctx, height, status) {\n    if (height === undefined) height = this.position.y + this.height / 1.75;\n    if (status === undefined) status = this.currentStatus1;\n    \n    ctx.font = '12px \"Press Start 2P\"';\n    ctx.fillStyle = \"black\";\n    const width = this.position.x + 15;\n    ctx.fillText(status, width, height);\n  }\n\n  draw(ctx) {\n    ctx.rect(this.position.x, this.position.y, this.width, this.height);\n    ctx.fillStyle = \"white\";\n    ctx.fill();\n    ctx.lineWidth = 5;\n    ctx.strokeStyle = \"black\";\n    ctx.stroke();\n\n    if (this.finalStatus.includes('wins')) {\n      this.drawWinnerText(ctx);\n    } else if (this.statusLine1 && this.statusLine2) {\n      this.drawMultiLineStatus(ctx);\n    } else {\n      this.drawSingleLine(ctx);\n    }\n  }\n\n  update() {\n    if (this.finalStatus.includes('wins')) {\n      this.currentStatus1 = this.finalStatus;\n      return;\n    }\n    if (this.count < this.length) {\n      if (this.count < this.statusLine1.length) {\n        this.currentStatus1 += this.finalStatus[this.count];\n        this.count++;\n      } else if (this.count === this.statusLine1.length) {\n        this.count++;\n        return;\n      } else {\n        this.currentStatus2 += this.finalStatus[this.count];\n        this.count++;\n      }\n    }\n  }\n}","export default class HealingObject {\n  constructor(xPos, yPos, height) {\n    this.height = 25;\n    this.width = 25;\n    this.img = new Image();\n    this.img.src = `./src/images/heal.png`\n    this.position = {\n      x: xPos,\n      y: yPos + height / 2\n    }\n    this.yVelocity = 60;\n    this.done = false;\n    this.finalPos = {\n      y: yPos - height / 2\n    };\n  }\n\n  handleCollision(){\n    return;\n  }\n\n  update(dt) {\n    if (this.position.y >= this.finalPos.y) {\n      this.position.y -= this.yVelocity / dt;\n    } else {\n      this.done = true;\n    }\n  }\n\n  draw(ctx) {\n    if (this.done) return null;\n    ctx.drawImage(this.img, this.position.x, this.position.y, this.width, this.height);\n  }\n}","import MovingObject from \"./moving_object\";\nimport StatusText from \"./status_text\";\nimport HealingObject from \"./healing_object\";\n\nexport default class Computer {\n  constructor(player, gameHeight, gameWidth) { // width only would be used for opponent position\n    this.name = player.name; // only if browsers are ALL made by inputing data into this \n    this.fileName = player.name.split(\" \").join(\"\");\n    this.img = new Image();\n    this.img.src = `./src/images/${this.fileName}.png`;\n    this.height = 150;\n    this.width = 150;\n    this.gameWidth = gameWidth;\n    this.gameHeight = gameHeight;\n    this.health = player.health;\n    this.currentHealth = player.health;\n    this.maxHealth = player.health;\n    this.attacking = false;\n    this.attacked = false;\n    this.inPosition = false;\n    this.items = [];\n    this.inPosition = false;\n    this.statusText = null;\n    this.attackText = player.attackText;\n    this.healText = player.healText;\n    this.attackPower = player.attackPower;\n    this.velocity = 55;\n    this.position = { // currently hidden off screen\n      y: 20,\n      x: this.gameWidth - this.width - 50\n    }\n    this.initialPosition = { // currently hidden off screen\n      x: this.gameWidth\n    }\n    this.checkName(player.name);\n  }\n\n  checkName(name) {\n    if (name === \"Internet Explorer\") {\n      this.name = \"IE\";\n    }\n  }\n  \n  // computer.js\n  draw(ctx, dt) { \n    // if being attacked, dont draw just return\n    if (!this.attacked) {\n      ctx.drawImage(this.img, this.initialPosition.x, this.position.y, this.width, this.height);\n    }\n    this.items.forEach((item, idx) => {\n      if (item.done) {\n        item.handleCollision();\n        delete this.items[idx];\n      }\n      // check for collision, if there is, reduce health\n      item.update(dt);\n      item.draw(ctx);\n    });\n  }\n\n  update(dt) {\n    if (!dt) return; // for initial dt being null\n    if (this.initialPosition.x > this.position.x) {\n      this.initialPosition.x -= this.velocity / dt;\n    }\n    if (this.initialPosition.x <= this.position.x) {\n      this.inPosition = true; // flags player as in position\n    }\n  }\n\n  handleAttack() {\n    this.attacked = true;\n    const attackTimer = setInterval(() => {\n      clearInterval(attackTimer);\n      this.attacked = false;\n    }, 20);\n  }\n\n  // attack(opponent) { // opponent should be instance of player class\n  //   this.attacking = true;\n  //   const dmg = Math.round(Math.random() * this.attackPower);\n  //   opponent.health -= dmg;\n  //   if (opponent.health <= 0) {\n  //     opponent.health = 0;\n  //   }\n  //   this.attackAnimation(opponent);\n  //   console.log(`${this.name} attacked ${opponent.name} for ${dmg} damage!`);\n  // }\n\n  attackAnimation(opponent) {\n    const num = Math.random();\n    const totalDmg = Math.round(((num < 0.25 ? .25 : num) * this.attackPower));\n    this.statusText = new StatusText(`${this.name} ${this.attackText} ${opponent.name} doing ${totalDmg} damage!`, this.gameHeight, this.gameWidth);\n    this.attacking = true;\n    let counter = 0;\n    const dmg = totalDmg / 3;\n    const attack = setInterval(() => {\n      counter++;\n      this.items.push(new MovingObject(this, opponent, dmg));\n      if (counter === 3) {\n        clearInterval(attack);\n      }\n    }, 250);\n    const endAttack = setInterval(() => {\n      clearInterval(endAttack);\n      this.attacking = false\n    }, 2750);\n  }\n\n  heal() { // just adds health back to \n    // const healing = Math.round(Math.random() * 10) + 6 - this.attackPower / 4;\n    this.healAnimation();\n    // const healing = Math.round(this.maxHealth * .10 + (Math.random() * this.attackPower / 5));\n    const healing = Math.round(this.maxHealth * .10);\n    this.statusText = new StatusText(`${this.name} ${this.healText} healing for ${healing}!`, this.gameHeight, this.gameWidth);\n    this.attacking = true;\n    this.health += healing;\n    if (this.health >= this.maxHealth) {\n      this.health = this.maxHealth;\n    }\n    const endAttack = setInterval(() => {\n      clearInterval(endAttack);\n      this.attacking = false;\n    }, 2250);\n  }\n\n  healAnimation() {\n    let counter = 0;\n    let width = this.width / 4;\n    const xPos = this.position.x - this.width / 2;\n    const heals = setInterval(() => {\n      counter++;\n      if (counter === 10) {\n        clearInterval(heals);\n      }\n      if (counter === 6) {\n        width = this.width / 3;\n      }\n      width += this.width / 5;\n      this.items.push(new HealingObject((xPos + width), this.position.y + this.height / 2, this.height))\n    }, 100); \n  }\n\n  playTurn(opponent) { // if health is low and opponent has more than low hp, heal\n    const move = (this.health < 20 && opponent.health > 20) ? () => this.heal() : (opponent) => this.attackAnimation(opponent);\n    // chooses to attack or curHealth based on health and Opp health\n    setTimeout(() => move(opponent), 1);\n  }\n}","import MovingObject from \"./moving_object\";\nimport StatusText from \"./status_text\";\nimport HealingObject from \"./healing_object\";\n\nexport default class Player {\n  constructor(player, gameHeight, gameWidth) { // width only would be used for opponent position\n    this.name = player.name; // only if browsers are ALL made by inputing data into this \n    this.fileName = this.name.split(\" \").join(\"\");\n    this.img = new Image();\n    this.img.src = `./src/images/${this.fileName}.png`;\n    this.height = 150;\n    this.width = 150;\n    this.gameHeight = gameHeight;\n    this.gameWidth = gameWidth;\n    this.health = player.health;\n    this.currentHealth = player.health;\n    this.maxHealth = player.health;\n    this.attacking = false;\n    this.attacked = false;\n    this.items = [];\n    this.inPosition = false;\n    this.statusText = null;\n    this.attackText = player.attackText;\n    this.healText = player.healText;\n    this.attackPower = player.attackPower;\n    this.velocity = 55;\n    this.position = { // default start pos\n      y: this.gameHeight - this.height - 50,\n      x: 40\n    }\n    this.initialPosition = { // currently hidden off screen\n      x: -this.width\n    }\n    this.checkName(player.name);\n  }\n\n  checkName(name) {\n    if (name === \"Internet Explorer\") {\n      this.name = \"IE\";\n    }\n  }\n\n  // player.js\n  draw(ctx, dt) {\n    // if being attacked, dont draw just return\n    if (!this.attacked) {\n      ctx.drawImage(this.img, this.initialPosition.x, this.position.y, this.width, this.height);\n    }\n    this.items = this.items.filter(item => item); // removes deleted objs\n    this.items.forEach((item, idx) => { // draws every object associated with player\n      if (item.done) {\n        item.handleCollision();\n        delete this.items[idx];\n      }\n      // check for collision, if there is, reduce health\n      item.update(dt);\n      item.draw(ctx);\n    });\n  }\n\n  update(dt) {\n    if (!dt) return; // for initial dt being null\n    if (this.initialPosition.x < this.position.x) {\n      this.initialPosition.x += this.velocity / dt;\n    }\n    if (this.initialPosition.x >= this.position.x) {\n      this.inPosition = true; // flags player as in position\n    }\n  }\n\n  handleAttack() {\n    this.attacked = true;\n    const attackTimer = setInterval(() => {\n      clearInterval(attackTimer);\n      this.attacked = false;\n    }, 20);\n  }\n  // attack(opponent) { // opponent should be instance of opponent class\n    // const dmg = Math.round(((Math.random() + .25) * this.attackPower) / 3); // add this to comp if it works\n    // opponent.health -= dmg;\n    // this.attackAnimation(opponent);\n    // if (opponent.health <= 0) {\n      //   opponent.health = 0;\n      // }\n      // this.statusText = `${this.name} used ${this.attackText} on ${opponent.name} for ${dmg} damage!`;\n      // console.log(`${this.name} attacked ${opponent.name} for ${dmg} damage!`);\n  // }\n    \n  attackAnimation(opponent) {\n    this.attacking = true;\n    const num = Math.random();\n    const totalDmg = Math.round(((num < 0.25 ? .25 : num) * this.attackPower));\n    this.statusText = new StatusText(`${this.name} ${this.attackText} ${opponent.name} doing ${totalDmg} damage!`, this.gameHeight, this.gameWidth);\n    let counter = 0;\n    const dmg = totalDmg / 3;\n    const attack = setInterval(() => {\n      counter++;\n      this.items.push(new MovingObject(this, opponent, dmg));\n      if (counter === 3) {\n        clearInterval(attack);\n      }\n    }, 250);\n    const endAttack = setInterval(() => {\n      clearInterval(endAttack);\n      this.attacking = false;\n    }, 2750);\n  }\n\n  heal() { // just adds health back to \n    // const healing = Math.round(Math.random() * 10) + 6 - this.attackPower / 4;\n    this.healAnimation();\n    // const healing = Math.round(this.maxHealth * .10 + (Math.random() * this.attackPower / 5));\n    const healing = Math.round(this.maxHealth * .10);\n    this.statusText = new StatusText(`${this.name} ${this.healText} healing for ${healing}!`, this.gameHeight, this.gameWidth);\n    this.attacking = true;\n    this.health += healing;\n    if (this.health >= this.maxHealth) {\n      this.health = this.maxHealth;\n    }\n    const endAttack = setInterval(() => {\n      clearInterval(endAttack);\n      this.attacking = false;\n    }, 2250);\n  }\n\n  healAnimation() {\n    let counter = 0;\n    let width = this.width / 4;\n    const xPos = this.position.x - this.width / 2;\n    const heals = setInterval(() => {\n      counter++;\n      if (counter === 10) {\n        clearInterval(heals);\n      }\n      if (counter === 6) {\n        width = this.width / 3;\n      }\n      width += this.width / 5;\n      this.items.push(new HealingObject((xPos + width), this.position.y + this.height / 2, this.height))\n    }, 100); \n  }\n}","export default class HealthBar {\n  constructor(player) {\n    this.gameHeight = player.gameHeight;\n    this.gameWidth = player.gameWidth;\n    this.height = 25;\n    this.width = player.width * .75;\n    this.player = player;\n    this.draw = this.draw.bind(this);\n    this.position = {\n      x: player.position.x + player.width / 8,\n      y: player.position.y + player.height + 10\n    }\n  }\n\n  update(dt) {\n    // using dt made it a fraction / doesn't work well with static increments that are numbers\n    if (this.player.currentHealth === this.player.health) return;\n    if (this.player.currentHealth < this.player.health) {\n      this.player.currentHealth += 0.5;\n      // increments \n    }\n    if (this.player.currentHealth > this.player.health) {\n      this.player.currentHealth -= 0.5;\n    }\n  }\n\n  draw(ctx) {\n    // draw box with player health\n    if (!this.player.inPosition) return;\n    ctx.fillStyle = \"white\";\n    ctx.fillRect(\n      this.position.x, \n      this.position.y, \n      this.width, \n      this.height\n      );\n    ctx.fillStyle = \"red\";\n    ctx.fillRect(\n      this.position.x, \n      this.position.y, \n      this.width * (this.player.currentHealth / this.player.maxHealth), // calculates pixels based on current player health\n      this.height\n      );\n    ctx.font = \"16px Arial\";\n    ctx.fillStyle = \"black\";\n    // tried Math.round here to try to slow down increments a tad\n    ctx.fillText(Math.round(this.player.currentHealth), this.position.x + this.width / 2.5, this.position.y + this.height - 5);\n    // ctx.fillText(this.player.currentHealth, this.position.x + this.width / 2.5, this.position.y + this.height - 5);\n  }\n}","export default class BattleOptions {\n  constructor(gameHeight, gameWidth, game) {\n    this.gameHeight = gameHeight;\n    this.gameWidth = gameWidth;\n    this.game = game;\n    this.height = 125;\n    this.width = 500;\n    this.selected = 0;\n    this.optionsText = [\"Attack\", \"Heal\", \"Quit\"]\n    this.options = [this.attack, this.heal, null];\n    this.position = {\n      x: this.gameWidth - this.width - 50,\n      y: this.gameHeight - this.height - 30\n    }\n  }\n\n  drawLine(ctx, width) {\n    const height = this.gameHeight - 75;\n    if (this.selected === 0) {\n      ctx.beginPath();\n      ctx.moveTo(width, height);\n      ctx.lineTo(width + 85, height);\n      ctx.closePath();\n      ctx.stroke();\n    } else if (this.selected === 1){\n      ctx.beginPath();\n      ctx.moveTo(width + 140, height);\n      ctx.lineTo(width + 195, height);\n      ctx.closePath();\n      ctx.stroke();\n    } else if (this.selected === 2) {\n      ctx.beginPath();\n      ctx.moveTo(width + 250, height);\n      ctx.lineTo(width + 310, height);\n      ctx.closePath();\n      ctx.stroke();\n    }\n  }\n\n  draw(ctx){\n    ctx.rect(this.position.x, this.position.y, this.width, this.height);\n    ctx.fillStyle = \"white\";\n    ctx.fill();\n    ctx.lineWidth = 5;\n    ctx.strokeStyle = \"black\";\n    ctx.stroke();\n    const options = this.optionsText.join(\"    \");\n    ctx.font = '14px \"Press Start 2P\"';\n    ctx.fillStyle = \"black\";\n    const width = this.position.x + this.width / 6;\n    ctx.fillText(options, width, this.position.y + this.height / 1.75);\n    this.drawLine(ctx, width);\n  }\n\n  attack(currentPlayer, opponent) {\n    currentPlayer.attackAnimation(opponent); // will mainly just work for human player\n  }\n\n  heal(currentPlayer) {\n    currentPlayer.heal(); // will mainly just work for human player\n  }\n  \n}","import HealthBar from \"./health_bar\";\nimport BattleOptions from \"./battle_options\";\nimport StatusText from \"./status_text\";\n\nexport default class Game {\n  constructor(player, computer) {\n    this.player = player;\n    this.computer = computer;\n    this.gameState = false; // starts true to prevent early attacks while players get positioned\n    this.activeAttack = false;\n    this.start = false;\n    this.playHealth = new HealthBar(this.player);\n    this.compHealth = new HealthBar(this.computer);\n    this.battleOptions = new BattleOptions(this.player.gameHeight, this.player.gameWidth, this);\n    this.winnerText = null;\n    this.currentPlayer = this.player;\n    this.status = null;\n    this.changeTurn = this.changeTurn.bind(this);\n    this.checkNames();\n  }\n\n  checkNames() {\n    if (this.player.name === this.computer.name) {\n      this.computer.name += \" v2\";\n    }\n  }\n\n  changeTurn() {\n    if (this.currentPlayer === this.player) {\n      this.currentPlayer = this.computer;\n      // this.attacking = false;\n    } else {\n      this.currentPlayer = this.player;\n      // this.attacking = false;\n    }\n  }\n\n  winner() {\n    let winnerText = \"\";\n    if (this.player.health <= 0) {\n      winnerText = `${this.computer.name} wins!`;\n    }\n\n    if (this.computer.health <= 0) {\n      winnerText = `${this.player.name} wins!`;\n    }\n    if (!winnerText) return false;\n    this.winnerText = new StatusText(winnerText, this.player.gameHeight, this.player.gameWidth);\n    return true;\n  }\n\n  gameOver() {\n    if (this.player.currentHealth <= 0 || this.computer.currentHealth <= 0) {\n      this.gameState = false;\n      return true;\n    }\n    return false;\n  }\n\n}\n","export default class GameOptions {\n  constructor(optionsArr, gameWidth, gameHeight) {\n    this.options = optionsArr;\n    this.images = []\n    this.selected = 0;\n    this.length = optionsArr.length;\n    this.gameWidth = gameWidth;\n    this.gameHeight = gameHeight;\n    this.loadImages(); \n  }\n\n  loadImages() { // loads all images for the character selection screen\n    this.options.forEach(option => {\n      const img = new Image();\n      const name = option.name.split(\" \").join(\"\");\n      img.src = `./src/images/${name}.png`;\n      this.images.push(img);\n    });\n  }\n\n  drawBox(ctx, x, y) {\n    const width = this.selected === 2 ? 225 : 110;\n    const height = y - 205;\n\n    ctx.rect(x, y, width, height);\n    ctx.lineWidth = 5;\n    ctx.strokeStyle = \"white\";\n    ctx.stroke();\n  }\n\n  draw(ctx) {\n    let startX = 100;\n    const startY = this.gameHeight / 1.5; \n\n    ctx.fillStyle = \"rgba(0, 0, 0, 0.75)\";\n    ctx.fillRect(0, 0, this.gameWidth, this.gameHeight);\n    ctx.font = '40px \"Press Start 2P\"';\n    ctx.fillStyle = \"white\";\n    ctx.fillText(\"CHOOSE YOUR BROWSER\", 35, this.gameHeight / 4);\n    this.options.forEach((option, idx) => {\n      const { name, attackPower, health } = option;\n\n      if (idx > 2) startX += 75; // makes up for internet explorer being a longer word\n      ctx.drawImage(this.images[idx], startX + 15, startY - 90, 50, 50);\n      ctx.font = '12px \"Press Start 2P\"';\n      ctx.fillText(`${name}`, startX, startY);\n      ctx.fillText(`AP: ${attackPower}`, startX, startY + 27);\n      ctx.fillText(`HP: ${health}`, startX, startY + 53);\n      if (idx === this.selected) this.drawBox(ctx, startX - 15, startY - 25);\n      startX += 150; // draws box at start pos of selected \n    });\n    this.drawBox(ctx);\n  }\n}","import \"./styles/index.css\";\nimport Computer from \"./js/computer\";\nimport Player from \"./js/player\";\nimport Game from \"./js/game\";\nimport GameOptions from \"./js/game_options\";\n\nconst players = [ // customize AP Health and texts later\n  {\n    health: 95,\n    attackPower: 18,\n    name: \"Chrome\",\n    attackText: \"threw rocks at\", // maybe throws ads \n    healText: \"used consume RAM,\" // maybe image is actual RAM\n  },\n  {\n    health: 105,\n    attackPower: 15,\n    name: \"Firefox\",\n    attackText: \"threw rocks at\",\n    healText: \"used a Privacy Protection,\"\n  },\n  {\n    health: 120,\n    attackPower: 5,\n    name: \"Internet Explorer\",\n    attackText: \"used Obsolete, it's pretty useless and hit\",\n    healText: \"used Prevent Uninstall, it just wont go away\"\n  },\n  {\n    health: 110,\n    attackPower: 12,\n    name: \"Safari\",\n    attackText: \"threw rocks at\", // apple money? icloud?\n    healText: \"used a band-aid,\" // used apple support and use dollar signs instead\n  }\n];\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const GAME_HEIGHT = 480;\n  const GAME_WIDTH = 840;\n  const canvas = document.getElementById(\"game-board\"); \n  const ctx = canvas.getContext(\"2d\");\n  \n  let game;\n  let player;\n  let computer;\n  let selectedPlayer;\n  let selectedComputer;\n  let gameStartOptions = new GameOptions(players, GAME_WIDTH, GAME_HEIGHT);\n  \n  const menu = document.getElementById(\"menu\");\n  const menuListen = e => {\n    if (e.keyCode === 32) {\n      e.preventDefault();\n      ctx.clearRect(0, 0, 840, 480);\n      // player = new Player(selectedComputer, GAME_HEIGHT, GAME_WIDTH); // temporary auto choice until the player decides their browser\n      // computer = new Computer(selectedPlayer, GAME_HEIGHT, GAME_WIDTH);\n      // game = new Game(player, computer);\n      menu.classList.add(\"close-menu\");\n      window.removeEventListener(\"keydown\", menuListen);\n      window.addEventListener(\"keydown\", choosePlayer);\n      // game = null; // THIS IS FOR TESTING ONLY CHANGE AFTER\n      gameLoop();\n    }\n  };\n\n  window.addEventListener(\"keydown\", menuListen);\n  \n  const gameOver = document.getElementById(\"game-over\");\n  const overListen = e => {\n    if (e.keyCode === 32) { // will redirect to main menu after space bar\n      e.preventDefault();\n      ctx.clearRect(0, 0, 840, 480);\n      gameOver.classList.add(\"close-menu\");\n      menu.classList.remove(\"close-menu\");\n      window.removeEventListener(\"keydown\", overListen);\n      window.addEventListener(\"keydown\", menuListen);\n      // player = new Player(players[0], GAME_HEIGHT, GAME_WIDTH); // temporary auto choice until the player decides their browser\n      // computer = new Computer(players[1], GAME_HEIGHT, GAME_WIDTH);\n      // game = new Game(player, computer);\n      game = null;\n      // gameLoop();\n    }\n  };\n  \n  const youSure = document.getElementById(\"you-sure\");\n  const youSureListen = e => {\n    if (e.keyCode === 121 || e.keyCode === 89) { // if they press y or Y\n      e.preventDefault();\n      // end the game\n      ctx.clearRect(0, 0, 840, 480);\n      youSure.classList.add(\"close-menu\");\n      menu.classList.remove(\"close-menu\");\n      player = null;\n      computer = null;\n      game = null;\n      window.removeEventListener(\"keydown\", youSureListen);\n      window.addEventListener(\"keydown\", menuListen);\n    }\n    if (e.keyCode === 110 || e.keyCode === 78) { // if they press n or N\n      // remove event listener and turn game listener back on\n      e.preventDefault();\n      youSure.classList.add(\"close-menu\");\n      window.removeEventListener(\"keydown\", youSureListen);\n      window.addEventListener(\"keydown\", gameInput); // ADD OPTIONS\n      requestAnimationFrame(gameLoop);\n    }\n  }\n\n  const gameInput = (e) => {\n    if (!game) return;\n    if (game.player.inPosition && game.computer.inPosition) {\n      game.start = true;\n    }\n    if (game.currentPlayer === game.player && game.activeAttack === false && game.start === true) {\n      let selected = game.battleOptions.selected;\n      switch (e.keyCode) {\n        case 37: // 37 is left arrow key\n        e.preventDefault();\n        selected -= 1;\n        if (selected < 0) { // change selected to allow player to choose move with keys\n          selected = game.battleOptions.options.length - 1;\n        }\n        game.battleOptions.selected = selected;\n        break;\n        case 39: // 39 is right arrow key\n        e.preventDefault();\n        selected++;\n        if (selected > game.battleOptions.options.length - 1) {\n          selected = 0;\n        }\n        game.battleOptions.selected = selected;\n        break;\n        case 13: // 13 is enter key\n          e.preventDefault();\n          const action = game.battleOptions.options[selected];\n          if (selected === game.battleOptions.options.length - 1) {\n            cancelAnimationFrame(requestId);\n            // temporary, will add a confirm (y/n) overlay in case of accidental click\n            youSure.classList.remove(\"close-menu\");\n            window.removeEventListener(\"keydown\", gameInput);\n            window.addEventListener(\"keydown\", youSureListen);\n              \n            // do this below action and return when quiting so turn doesnt change and make computer go\n            return;\n          }\n          game.activeAttack = true;\n          // ^^ will only flag if its an attack and not quit\n          game.changeTurn();\n          action(game.player, game.computer);\n          // will either attack or heal based on player choice\n          break;\n      }\n    } else return;\n  };\n  \n  const choosePlayer = (e) => { // changing logic to work with just given options\n    // if (!game) return;\n    // if (game.currentPlayer === game.player && game.activeAttack === false && game.start === true) {\n    let selected = gameStartOptions.selected;\n    switch (e.keyCode) {\n      case 37: // 37 is left arrow key\n        e.preventDefault();\n        selected -= 1;\n        if (selected < 0) { // change selected to allow player to choose move with keys\n          selected = gameStartOptions.length - 1;\n        }\n        gameStartOptions.selected = selected;\n        break;\n\n      case 39: // 39 is right arrow key\n        e.preventDefault();\n        selected++;\n        if (selected > gameStartOptions.length - 1) {\n          selected = 0;\n        }\n        gameStartOptions.selected = selected;\n        break;\n\n      case 13: // 13 is enter key\n        e.preventDefault();\n        const choice = gameStartOptions.options[selected];\n        const random = Math.round(Math.random() * (gameStartOptions.length - 1)); // chooses a random browser for computer\n        const randComp = gameStartOptions.options[random];\n        selectedPlayer = new Player(choice, GAME_HEIGHT, GAME_WIDTH);\n        selectedComputer = new Computer(randComp, GAME_HEIGHT, GAME_WIDTH);\n        game = new Game(selectedPlayer, selectedComputer);\n        window.removeEventListener(\"keydown\", choosePlayer);\n        window.addEventListener(\"keydown\", gameInput);\n        break;\n    }\n  }\n  \n  let prevTime = 0;\n  let requestId;\n\n  function gameLoop(timestamp) {\n    let dt = timestamp - prevTime;\n    prevTime = timestamp;\n  \n    ctx.clearRect(0, 0, GAME_WIDTH, GAME_HEIGHT);\n    ctx.beginPath();\n\n    if (!game) {\n      gameStartOptions.draw(ctx);\n      requestId = requestAnimationFrame(gameLoop);\n    } else { \n      // drawings will always render/update until game is ended\n      game.player.update(dt);\n      game.player.draw(ctx, dt);\n\n      game.computer.update(dt);\n      game.computer.draw(ctx, dt);\n\n      game.playHealth.update(dt);\n      game.playHealth.draw(ctx);\n    \n      game.compHealth.update(dt);\n      game.compHealth.draw(ctx);\n\n      if (game.player.inPosition && game.computer.inPosition) {\n        game.gameState = true;\n      } else requestId = requestAnimationFrame(gameLoop);\n\n      if (game.gameState) {\n        if (!game.computer.attacking && !game.player.attacking) game.activeAttack = false;\n        if (game.currentPlayer === game.computer && !game.activeAttack) {\n          game.activeAttack = true;\n          game.computer.playTurn(game.player);\n          game.currentPlayer = game.player;\n          // set timeout flag for player turns\n        }\n        if (game.winner()) {\n          game.winnerText.update();\n          game.winnerText.draw(ctx);\n        } else {\n          if (game.currentPlayer === game.player && game.activeAttack) {\n            if (!game.computer.statusText) game.battleOptions.draw(ctx);\n            else {\n              game.computer.statusText.update() ;\n              game.computer.statusText.draw(ctx);\n            }\n          } else if (game.currentPlayer === game.computer && game.activeAttack) {\n            // if (!game.computer.statusText) game.battleOptions.draw(ctx);\n            // else {\n              game.player.statusText.update();\n              game.player.statusText.draw(ctx);\n            // }\n          } else { // if there is no active attack, draw options for human player\n            game.battleOptions.draw(ctx);\n          }\n        }\n        \n        if (game.gameOver() && !game.activeAttack) {\n          game.activeAttack = true;\n        }\n        \n        if (game.gameState) {\n          requestId = requestAnimationFrame(gameLoop);\n        } else {\n          cancelAnimationFrame(requestId);\n          setTimeout(() => {\n            // puts new overlay on the game if over to prompt play again\n            window.removeEventListener(\"keydown\", gameInput); // removes gameplay listeners\n            gameOver.classList.remove(\"close-menu\"); // displays overlay\n            window.addEventListener(\"keydown\", overListen); // adds restart game listener\n          }, 2000);\n        }\n      }\n    }\n  }\n});"],"sourceRoot":""}